#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require_relative "../lib/sidekiq-process_manager"

DEFAULT_PROCESS_COUNT = 1

options = {
  process_count: Integer(ENV.fetch('SIDEKIQ_PROCESSES', DEFAULT_PROCESS_COUNT)),
  prefork: !ENV.fetch("SIDEKIQ_PREFORK", "").empty?,
  preboot: ENV["SIDEKIQ_PREBOOT"],
  max_memory: parse_max_memory(ENV["SIDEKIQ_MAX_MEMORY"]),
  mode: nil,
}

def parse_max_memory(max_memory)
  value = nil

  matched = (max_memory.match(/\A([\d]+(?:\.[\d]+)?)([mg])\z/i)
  if matched
    value = matched[1].to_f
    if matched[2].downcase == 'm'
      value *= 1024 * 1024
    elsif matched[2].downcase == 'g'
      value *= 1024 * 1024 * 1024
    end
  end

  value
end


parser = OptionParser.new do |opts|
  opts.banner = "Usage: sidekiq-process-manager [options] [--] [sidekiq options]"

  opts.on('--processes PROCESSES', Integer, "Number of processes to spin up (can also specify with SIDEKIQ_PROCESSES)") do |count|
    options[:process_count] = count
  end

  opts.on('--[no-]prefork', "Use prefork for spinning up sidekiq processes (can also specify with SIDEKIQ_PREFORK)") do |prefork|
    options[:prefork] = prefork
  end

  opts.on('--preboot FILE', "Preboot the processes (can also specify with SIDEKIQ_PREBOOT)") do |preboot|
    options[:preboot] = preboot
  end

  opts.on('--max-memory MEMORY', "Max memory for each process (can also specify with SIDEKIQ_MAX_MEMORY); suffix with m or g to specify megabytes or gigabytes") do |max_memory|
    options[:max_memory] = parse_max_memory(max_memory)
  end

  opts.on('--testing', "Enable test mode") do |testing|
    options[:mode] = :testing if testing
  end

  opts.on("--help", "Prints this help") do
    puts opts
    exit
  end

  opts.separator(<<~DESCR)

  After the manager options, pass in any options for the sidekiq processes.
  Additionally, passing in the optional `--` will explicitly end the manager options and begin the sidekiq opts.
  E.g.
      $ sidekiq-process-manager --no-prefork -- -C config/sidekiq.rb
      Calls sidekiq with `sidekiq -C config/sidekiq.rb`
  DESCR
end

sidekiq_args = []
begin
  parser.order!(ARGV) { |nonopt| sidekiq_args << nonopt }
rescue OptionParser::InvalidOption => err
  # Handle the case where a user doesn't put in the `--` to separate the args
  sidekiq_args.concat(err.args)
end

ARGV[0, 0] = sidekiq_args

begin
  manager = Sidekiq::ProcessManager::Manager.new(**options)
  manager.start
rescue => e
  STDERR.puts e.message
  STDERR.puts e.backtrace.join($/)
  exit 1
end
